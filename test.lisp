(load "scanner.lisp")

(defun write-to-stream (rezult &optional (stream t))
  (format stream "~5S ~7S ~15S ~S~%~%" 'Line 'Column 'Symbol 'Type)
  (mapc (lambda (lexem)
	  (let ((value (lexem-value (second lexem)))
		(line (lexem-row (second lexem)))
		(column (lexem-column (second lexem)))
		(type (car lexem)))
	    (format stream "~5S ~7S ~15S ~S~%" line column value type)))
	rezult))

(defun scanner-test (code-file &optional log-file)
  (if log-file
      (with-open-file (stream log-file :direction :output :if-exists :supersede)
	(write-to-stream (scanner code-file) stream))
      (write-to-stream (scanner code-file))))

(defun run-tests ()
  (format t "TEST 1:~%")
  (format t "~S~%~%" (scanner-test "tests/scanner/true1.txt"))
  (format t "TEST 2:~%")
  (format t "~S~%~%" (scanner-test "tests/scanner/true2.txt"))
  (format t "TEST 3:~%")
  (format t "~S~%~%"(scanner-test "tests/scanner/true3.txt"))
  (format t "TEST 4:~%")
  (format t "~S~%~%" (scanner-test "tests/scanner/false1.txt"))
  (format t "TEST 5:~%")
  (format t "~S~%~%"(scanner-test "tests/scanner/false2.txt"))
  (format t "TEST 6:~%")
  (format t "~S~%~%" (scanner-test "tests/scanner/false3.txt"))
  (format t "TEST 7:~%")
  (format t "~S~%~%" (scanner-test "tests/scanner/false4.txt"))
  t)
